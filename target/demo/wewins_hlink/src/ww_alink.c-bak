#include "qcom_common.h"
#include "qcom_gpio.h"
#include "qcom_gpio_interrupts.h"
#include "wmi.h"

#include "alink_export.h"
#include "alink_export_rawdata.h"
#include "ww_debug.h"
#include "os/product/product.h"
#include "ww_dset.h"
#include "ww_common.h"
 
/*
typedef struct gpio_info_s 
{
    unsigned int pin_num;
    unsigned int num_configs;
    gpio_pin_peripheral_config_t    *configs;
} gpio_info_t;
*/
typedef struct virtual_dev_s 
{
	char power;
	char temp_value;
	char light_value;
	char time_delay;
	char work_mode;
}virtual_dev_t;

/*typedef struct ap_info_s 
{
	char ssid[32];
	char passwd[64];
	char bssid[6];
}ap_info_t;*/

//static ap_info_t ap;

/***Device info***/

virtual_dev_t virtual_device = {0x01, 0x30, 0x50, 0, 0x01};

char *device_attr[5] = { "OnOff_Power", "Color_Temperature", "Light_Brightness",
	"TimeDelay_PowerOff", "WorkMode_MasterLight"
};

const char *main_dev_params =
    "{\"OnOff_Power\": { \"value\": \"%d\" }, \"Color_Temperature\": { \"value\": \"%d\" }, \"Light_Brightness\": { \"value\": \"%d\" }, \"TimeDelay_PowerOff\": { \"value\": \"%d\"}, \"WorkMode_MasterLight\": { \"value\": \"%d\"}}";
static char device_status_change = 1;


#ifndef PASS_THROUGH
#define buffer_size 512
static int alink_device_post_data(alink_down_cmd_ptr down_cmd)
{
	alink_up_cmd up_cmd;
	int ret = ALINK_ERR;
	char *buffer = NULL;
	if (device_status_change) 
	{
		buffer = (char *)mem_alloc(buffer_size);
		if (buffer == NULL)
			return -1;
		memset(buffer, 0, buffer_size);
		sprintf(buffer, main_dev_params, virtual_device.power,
			virtual_device.temp_value, virtual_device.light_value,
			virtual_device.time_delay, virtual_device.work_mode);
		up_cmd.param = buffer;
		if (down_cmd != NULL) 
		{
			up_cmd.target = down_cmd->account;
			up_cmd.resp_id = down_cmd->id;
		} 
		else 
		{
			up_cmd.target = NULL;
			up_cmd.resp_id = -1;
		}
		ret = alink_post_device_data(&up_cmd);
		if (ret == ALINK_ERR) 
		{
			printf("post failed!\n");
			qcom_thread_msleep(2000);
		} else 
		{
			printf("dev post data success!\n");
			device_status_change = 0;
		}
		if (buffer)
			mem_free(buffer);
	}
	return ret;
}
#endif

/*get cmd from server 服务器下发命令,需要设备端根据具体业务设定去解析处理*/
int main_dev_set_device_status_callback(alink_down_cmd_ptr down_cmd)
{
    int attrLen = 0, valueLen = 0, value = 0, i = 0;
    char *valueStr=NULL, *attrStr=NULL;
    /* do your job here */
    printf("%s :%d \n", __func__, __LINE__);
    printf("%s %d\n%s\n", down_cmd->uuid, down_cmd->method,down_cmd->param);
    device_status_change = 1;

    for (i = 0; i < 5; i++) {
        attrStr = alink_JsonGetValueByName(down_cmd->param, strlen(down_cmd->param), device_attr[i], &attrLen, 0);
        valueStr = alink_JsonGetValueByName(attrStr, attrLen, "value", &valueLen, 0);
        if (valueStr && valueLen>0) {
            char lastChar = *(valueStr+valueLen);
            *(valueStr+valueLen) = 0;
            value = atoi(valueStr);
            *(valueStr+valueLen) = lastChar;
            switch (i) {
                case 0:
                    virtual_device.power = value;
                    break;
                case 1:
                    virtual_device.temp_value = value;
                    break;
                case 2:
                    virtual_device.light_value = value;
                    break;
                case 3:
                    virtual_device.time_delay = value;
                    break;
                case 4:
                    virtual_device.work_mode = value;
                    break;
                default:
                	break;
            }
        }
    }

    return 0;
    /* do your job end! */
}

/*服务器查询设备状态,需要设备上报状态*/
int main_dev_get_device_status_callback(alink_down_cmd_ptr down_cmd)
{
	/* do your job here */
	printf("%s :%d \n", __func__, __LINE__);
	printf("%s %d\n%s\n", down_cmd->uuid, down_cmd->method,down_cmd->param);
	device_status_change = 1;
	return 0;
	/*do your job end */
}


TX_MUTEX alink_mutex;

#define cur_dev_id  0

//extern TX_THREAD uart_thread;

/*
void add_gpio_configurations(void)
{
    A_UINT32    i = 0;
    gpio_info_t    pin_configs[] = {
        { 2, 1, (gpio_pin_peripheral_config_t [1]) { { 5, 0x80001800 } } },
    };

    for (i = 0; i < sizeof(pin_configs)/sizeof(gpio_info_t); i++)
    {
        if (A_OK != qcom_gpio_add_alternate_configurations(pin_configs[i].pin_num, 
                        pin_configs[i].num_configs, pin_configs[i].configs))
        {
            //A_PRINTF("qcom_add_config failed for pin %d\n", pin_configs[i].pin_num);
        }
    }

    return;
}
*/

int ww_station_start(char *ssid,char *pass)
{
  	A_UINT32 bss_number =0;
  	A_STATUS status     = 0;
  	//A_UINT32 listen_time = 0;
	//A_UINT8  rssi ;
  	//A_UINT16  channel;
  	A_UINT32  ip      = 0;
  	A_UINT32  mask    = 0;
  	A_UINT32  gateway = 0;
  	status = qcom_op_set_mode(cur_dev_id,QCOM_WLAN_DEV_MODE_STATION);
  	//qcom_sta_get_rssi(cur_dev_id,&rssi);
  	//qcom_sta_get_listen_time(cur_dev_id,&listen_time);
  	qcom_sec_set_passphrase(cur_dev_id,pass);
  	status = qcom_sta_connect_with_scan(cur_dev_id,ssid);
  	//qcom_get_channel(cur_dev_id,&channel);
  	qcom_thread_msleep(6000);
  	status = qcom_scan_get_bss_number(cur_dev_id,&bss_number);
  
 	 if(bss_number==0)
	 {
   		return 0;
	 }	
  
  	qcom_dhcpc_enable(cur_dev_id,TRUE);
  	//qcom_commit(cur_dev_id);
  	qcom_thread_msleep(5000);
  	status = qcom_ip_address_get(cur_dev_id,&ip, &mask, &gateway);
	#if 1
  	if(ip == 0)
	{
    	//alink_printf_info("ip=0\n");
    	//qcom_ip_address_get(cur_dev_id,&ip, &mask, &gateway);
    	//qcom_sys_reset();//or reset
    	return 0;
  	}
	#endif
  	alink_printf_info("addr=0x%02x,mask=0x%02x,gate:0x%02x\n",ip,mask,gateway);

  	//qcom_set_connect_callback(cur_dev_id,wmf_connectin_callback);

 	return 1;  
}


#ifdef PASS_THROUGH
static int execute_cmd(const char *rawdata, int len)
{
	alink_printf_info("%s %d \n", __FUNCTION__, __LINE__);
	int ret = 0, i = 0;
	if (len < 1)
		ret = -1;
	for (i = 0; i < len; i++) 
	{
		alink_printf_info("%2x ",(unsigned char) rawdata[i]);
		switch (i) 
		{
			case 2:
				virtual_device.power = rawdata[i];
				break;
			case 3:
				virtual_device.work_mode = rawdata[i];
				break;
			case 4:
				virtual_device.temp_value = rawdata[i];
				break;
			case 5:
				virtual_device.light_value = rawdata[i];
				break;
			case 6:
				virtual_device.time_delay = rawdata[i];
				break;
			default:
				break;
		}
	}
	return ret;
}

static int get_device_status(char *rawdata, int len)
{
	/* do your job here */
	alink_printf_info("enter %s\n", __FUNCTION__);
	int ret = 0;
	if (len > 7) 
	{
		rawdata[0] = 0xaa;
		rawdata[1] = 0x07;
		rawdata[2] = virtual_device.power;
		rawdata[3] = virtual_device.work_mode;
		rawdata[4] = virtual_device.temp_value;
		rawdata[5] = virtual_device.light_value;
		rawdata[6] = virtual_device.time_delay;
		rawdata[7] = 0x55;
	} 
	else 
	{
		ret = -1;
	}
	/* do your job end */
	return ret;
}
/*主动上报设备状态,需要用户自己实现*/
int alink_device_post_raw_data(void)
{
    /* do your job here */
	alink_printf_info("enter %s\n", __FUNCTION__);
   	int len = 8, ret = 0;
    	char rawdata[8] = { 0 };
	if(device_status_change)
	{
		get_device_status(rawdata, len);
		ret = alink_post_device_rawdata(rawdata, len);
		device_status_change = 0;
		if (ret) 
		{
			alink_printf_error("post failed!\n");
		} 
		else 
		{
			alink_printf_info("dev post raw data success!\n");
		}
	}
    /* do your job end */
    return ret;
}
/*透传方式服务器查询指令回调函数*/
int rawdata_get_callback(const char *in_rawdata,int in_len, char *out_rawdata, int *out_len)
{
	/*TODO: 下发指令到MCU */
	alink_printf_info("enter %s\n", __FUNCTION__);
	int ret; 
	/*  此例是假设能同步获取到虚拟设备数据, 实际应用中,处理服务器指令是异步方式,需要厂家处理完毕后主动上报一次设备状态 */
	tx_mutex_get(&alink_mutex, TX_WAIT_FOREVER);
	device_status_change = 1;
	ret = alink_device_post_raw_data();
	tx_mutex_put(&alink_mutex);
	return ret;
}

/*透传方式服务器下发指令回调函数*/
/*实际应用中,处理服务器指令是异步方式,需要厂家处理完毕后主动上报一次设备状态*/
int rawdata_set_callback(char *rawdata, int len)
{
	/* TODO: */
	/*get cmd from server, do your job here! */
	alink_printf_info("enter %s\n", __FUNCTION__);
	int ret = 0;
	tx_mutex_get(&alink_mutex, TX_WAIT_FOREVER);
	ret = execute_cmd(rawdata, len);
	/* do your job end! */
	device_status_change = 1;
	alink_device_post_raw_data();
	tx_mutex_put(&alink_mutex);
	return ret;
}
#endif

int alink_handler_systemstates_callback(void *dev_mac, void *sys_state)
{
	char uuid[33];
	//char *mac = (char *)dev_mac;
	enum ALINK_STATUS *state = (enum ALINK_STATUS *)sys_state;
	switch (*state) 
	{
		case ALINK_STATUS_INITED:
			break;
		case ALINK_STATUS_REGISTERED:
			sprintf(uuid, "%s", alink_get_uuid(NULL));	
			break;
		case ALINK_STATUS_LOGGED:
			sprintf(uuid, "%s", alink_get_uuid(NULL));
			break;
		default:
			break;
	}
	//alink_printf_info("state %d, mac %s, uuid %s \n", *state, mac,uuid);
	return 0;
}

/**fill device info**/

void alink_fill_deviceinfo(struct device_info *deviceinfo)
{				/*fill main device info here */
	product_get_name(deviceinfo->name);
	product_get_sn(deviceinfo->sn);  // 产品注册方式 如果是sn, 那么需要保障sn唯一
	product_get_key(deviceinfo->key);
	product_get_model(deviceinfo->model);
	product_get_secret(deviceinfo->secret);
	product_get_type(deviceinfo->type);
	product_get_version(deviceinfo->version);
	product_get_category(deviceinfo->category);
	product_get_manufacturer(deviceinfo->manufacturer);
	product_get_debug_key(deviceinfo->key_sandbox);
	product_get_debug_secret(deviceinfo->secret_sandbox);
	platform_wifi_get_mac(deviceinfo->mac);//产品注册mac唯一 or sn唯一  统一大写
	product_get_cid(deviceinfo->cid); // 使用接口获取唯一chipid,防伪造设备
	printf("DEV_MODEL:%s \n", deviceinfo->model);
}
/*
void alink_fill_deviceinfo(struct device_info *deviceinfo)
{	
	A_UINT8 mac[7];
	strcpy(deviceinfo->name, product_dev_name);
	strcpy(deviceinfo->sn, product_dev_sn);  
	strcpy(deviceinfo->key, product_key);  
	strcpy(deviceinfo->model, product_model);
	strcpy(deviceinfo->secret, product_secret); 
	strcpy(deviceinfo->type, DEV_TYPE);
	strcpy(deviceinfo->version, product_dev_version);
	strcpy(deviceinfo->category, product_dev_DEV_CATEGORY);
	strcpy(deviceinfo->manufacturer, DEV_MANUFACTURE);
	strcpy(deviceinfo->key_sandbox, product_debug_key);
	strcpy(deviceinfo->secret_sandbox, product_debug_secret);
	qcom_mac_get(cur_dev_id, mac);
	qcom_sprintf(deviceinfo->mac,"%02x:%02x:%02x:%02x:%02x:%02x",mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
	alink_printf_info("deviceinfo->mac:%s\n\n", deviceinfo->mac);
	A_UINT32 ip,mask,gate;
	A_UINT8 bytes[4] = {0};
    	qcom_ip_address_get(cur_dev_id, &ip, &mask, &gate);
	bytes[0] = (ip >> 24) & 0x000000FF;		
	bytes[1] = (ip >> 16) & 0x000000FF;	
	bytes[2] = (ip >> 8) & 0x000000FF;	
	bytes[3] =  ip & 0x000000FF;
	sprintf(deviceinfo->ip, "%d.%d.%d.%d", bytes[0], bytes[1], bytes[2], bytes[3]);
	strcpy(deviceinfo->cid, product_dev_cid);
}
*/
int start_alink(void)
{
	char auth;
	char encry;
	char channel;
	char notify_app;
	int ret=0;
	A_UINT8 mac[7];
	char mac_str[18];
	char model[81];
	char secret[41];
	qcom_mac_get(cur_dev_id, mac);
	sprintf(mac_str,"%02x:%02x:%02x:%02x:%02x:%02x",mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
	printf("******start alink******\n");

	product_info_t product_info;
	memset(&product_info, 0, sizeof(product_info));

	product_get_model(model);
	product_get_secret(secret);

	ret = ww_read_nv(&product_info, sizeof(product_info), WW_DSETID_NVRAM_PRODUCT);

	if(product_info.ap.ssid[0] == 0 || ret != 0){
		ret = 0;
		while(!ret)
		{
			aws_start(model, secret, mac_str, NULL);
			ret = aws_get_ssid_passwd(product_info.ap.ssid, product_info.ap.passwd, product_info.ap.bssid, &auth, &encry, &channel);
		}
		notify_app = 1;
	}else{
		notify_app = 0;
	}
	
	alink_printf_info("ssid:%s, passwd:%s, auth:%d, encry:%d, channel:%d\n", product_info.ap.ssid, product_info.ap.passwd, auth, encry, channel);
	
	/**connect to ap**/
   	int conn_cnt = 3;
    qcom_power_set_mode(0, MAX_PERF_POWER);
    while(conn_cnt--)
	{
        ret = ww_station_start(product_info.ap.ssid, product_info.ap.passwd);
        if(ret == 1)
		{
           	alink_printf_info("connect successfully\n");
            break;
        }
        qcom_thread_msleep(2000);
    }
	
	if(conn_cnt >= 0){
		if(notify_app){
			if(0 != ww_write_nv(&product_info, sizeof(product_info), WW_DSETID_NVRAM_PRODUCT))
				alink_printf_error("write product info to flash error!\n");
		}
	}else{
		alink_printf_error("connect ap failed, system reset\n");
		qcom_sys_reset();
	}
	//extern TX_THREAD uart_thread;
	//tx_thread_resume(&uart_thread);
	
	//notify to app and release the souce for the ap connect
	if(notify_app){
		aws_notify_app();		
		aws_destroy();
	}
	
	//connect to the cloud
	struct device_info main_dev;
	memset(&main_dev, 0, sizeof(struct device_info));
	
	alink_fill_deviceinfo(&main_dev);

	tx_mutex_create(&alink_mutex, "alink mutex", TX_NO_INHERIT);	
	
	//alink_set_loglevel(ALINK_LL_DEBUG | ALINK_LL_INFO | ALINK_LL_WARN |ALINK_LL_ERROR | ALINK_LL_DUMP);
	alink_set_loglevel( ALINK_LL_INFO );
	
	main_dev.sys_callback[ALINK_FUNC_SERVER_STATUS] = alink_handler_systemstates_callback;

	//start alink-sdk
#ifdef PASS_THROUGH
	alink_start_rawdata(&main_dev, rawdata_get_callback, rawdata_set_callback);
#else
	main_dev.dev_callback[ACB_GET_DEVICE_STATUS] = main_dev_get_device_status_callback;
	main_dev.dev_callback[ACB_SET_DEVICE_STATUS] = main_dev_set_device_status_callback;
	
	alink_start(&main_dev);	/*register main device here */
#endif
	
	//wait main device login, -1 means wait forever
	
	alink_wait_connect(NULL, ALINK_WAIT_FOREVER);
	
	while (1) 
	{
#ifdef PASS_THROUGH
		alink_device_post_raw_data();
#else
		alink_device_post_data(NULL);
#endif
		alink_printf_info("alink device post raw data\n");
		tx_thread_sleep(500);
	}

	alink_end();	
	tx_mutex_delete(&alink_mutex);
	
	return ret;
}

void alink_entry(ULONG which_thread)
{
    #define PRINTF_ENBALE 1
    extern void user_pre_init(void);
    user_pre_init();
    qcom_enable_print(PRINTF_ENBALE);
    //Add all the alternate configurations for each GPIO pin
    //add_gpio_configurations();

	//test
    start_alink();
}


